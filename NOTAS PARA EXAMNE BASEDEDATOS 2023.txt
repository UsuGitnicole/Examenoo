SELECT LOCALIDAD || "-"||NOMBRE FROM CLIENTES WHERE LENGTH (NOMBRE)>15 ORDER BY LOCALIDAD ASC;

SELECT APELLIDO, TO_CHAR(FECHA_NAC,'DD"DE"MONTH"DE"Y

YYY') AS FECHA 
FROM EMPLEADOS;

SELECT PRODUCTO_NO, DESCRIPTION, PRECIO_ATUN*0,90 AS PRECIO FINAL FROM PRODUCTOS WHERE 
STOCK_DISPONIBLE>=25;

SELECT*FROM PRODCUTOS WHERE FECHA_PEDIDO > '01/02/2023';
BETWEEN SYSDATE AND (SYSDATE-2) AND FECHA_PEDIDO < SYSDATE;

SELECT DEP_NO, MAX (SALARIO) AS SALARIO, MIN (SALARIO) ASSALARIO MINIMO FROM EMPLEADOS GROUP 
BY DESPIDO HAVING 

MAVING MAX<(SALARIO)>20000;
;

SELECT DEP_NO, MAX(SALARIO),  MIN(SALARIO), SUMA(SALARIOS) FROM EMPLEADOS
WHERE SALARIO <=2000, GROUP NY DEP_NO;
GROUP BY DEP-NO HAVING MAX(SALARIO)<2000;

SELECT DEP_MO, COUNT


SELECT VENDEDOR_NO, COUNT (VENDEDOR_NO) FROM CLIENTES GROUP BY VENDEDOR NO 
HAVING COUNT (VENDEDOR_NO)>2,





--1. Aumenta en 100 euros el salario almacenado de los empleados con oficio de DIRECTOR
UPDATE EMPLEADOS SET SALARIO=100+SALARIO WHERE OFICIO='DIRECTOR';
--2
UPDATE EMPLEADOS SET SALARIO=SALARIO+50 WHERE DEP_NO =(SELECT DEP_NO FROM DEPARTAMENTO WHERE DNOMBRE='INVESTIGACION');
--3
UPDATE PEDIDOS SET CLIENTES_NO=(SELECT CLIENTE_NO FROM CLIENTES WHERE NOMBRE='EDICIONES SANZ') WHERE PEDIDO_NO=1010;
--4
UPDATE CLIENTES C SET DEBE=(SELECT SUM(P.UNIDADES)FROM PEDIDOS P WHERE P.CLIENTE_NO=C.CLIENTE_NO);
--5
UPDATE CLIENTES C SET DEB=(SELECT NVL(SUM(P.UNIDADES * PR.PRECIOS-ACTUAL);)FROM PEDIDOS P JOIN PRODUCTOS PR ON P.PROUCTOS_NO=PR.PRODUCTO_NO WHERE P.CLIENTE_NO=C.CLIENTE_NO));
--6
UPDATE PRODUCTOS P SET STOCK_DISPONIBLE= STOCK_DISPONIBLE-(SELECT NVL(SUM(UNIDADES);) FROM PEDIDOS E WHERE P.PRODUCTO_NO=E.PRODUCTO_NO GROUP BY PRODUCTO_NO);
--7
UPDATE EMPLEADOS SET SALARIO=SALARIO*11 WHERE SALARIO*12<20000;
--7
UPDATE EMPLEADOS SET COMISION=NVL(COMISION,0)+100, SALARIO=SALARIO*1.05 WHERE DEP_NO=(SELECT DEP_NO FROM DEPARTAMENTOS WHERE DNOMBRE='VENTAS') AND COMISION<1000;
--8
DELETE FROM PEDIDOS WHERE NOT BETWEEN 3 AND 6;
--9
DELETE FROM CLIENTE WHERE CLIENTE_NO NOT IN (SELECT DISTINCT CLIENTE_NO FROM PEDIDOS) AND LIMIT CREDITO > 5000;




SOLUCCIONES


SELECT E.FIRST_NAME, E.LAST_NAME, J.FUNCTION FROM EMPLOYEE E JOIN JOB J ON E.JOB_ID=J.JOB_ID;

SELECT C.NAME, E.FIRST_NAME FROM EMPLOYEE E JOIN CUSTOMER C ON C.SALESPERSON_ID=E.EMPLOYEE_ID;

SELECT E2.FIRST_NAME, E1.FRIST_NAME FROM EMPLOYEE JOIN EMPLOYEE E2 ON E1.EMPLOYEE_ID=E2.EMPLOYEE_ID;

EXAMEN DE BD EL 19 o 22.



SELECT E.FIRST_NAME, D.NAME FROM EMPLOYEE E JOIN DEPARTMENT D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID AND NVL(COMISSION, 0)>0;

SELECT C.NAME FROM CUSTOMER C JOIN EMPLOYEE E ON C.SALESPERSON_ID=EMPLOYEE_ID AND LAST_NAME='WARD';

SELECT COUNT(*) FROM EMPLOYEE WHERE EMPLYEE WHERE JOB_ID IN (SELECT JOB_ID FROM JOB WHERE FUNCTION='SALESPERSON');

7--SELECT P.DESCRIPCION, PP.LIST_PRICE FROM PRODUCT P JOIN PRICE PP ON P.PRODUCT_ID=PP.PRODUCT_ID AND PP.END_DATE IS NULL;

8--SELECT D.NAME, COUNT(E.DEPARTMENT_ID) AS NUM_EMPLEADOS FROM DEPARTMENT D JOIN EMPLOYEE E ON D.DEPARTMENT_ID=E.DEPARTMENT_ID GROUP BY D.NAME;

9--SELECT C.NAME, MAX(S.TOTAL) FROM CUSTOMER LEFT JOIN SALES_ORDER S ON C.CUSTOMER_ID=S.CUSTOMER.ID GROUP BY C.NAME;

10--SELECT D.DEPARTMENT_ID AS "CODIGO", D.NAME, AS "NOMBRE DEP", COALESCE (COUNT(E.EMPLOYEE_ID), O) AS "NUM EMPLEADOS" FROM DEPARTMENT D LEFT JOIN  EMPLOYEE E ON D.DEPARTMENT_ID=E.DEPARTMENT_ID GROUP BY D.DEPARTMENT_ID, D.NAME;

11--SELECT C.NAME AS "NOMBRE CLIENTE MAYOR VALOR" FROM CUSTOMER C JOIN SALES_ORDER S ON C.CUSTOMER_ID=S.CUSTOMER_ID WHERE S.TOTAL=(SELECT MAX(TOTAL) FROM SALES_ORDER);

12--SELECT(EMPLOYEE.FIRST_NAME) AS "NOMBRE_EMPLEADO", MAX(COUNT(CUSTOMER.CUSTOMER_ID)) FROM EMPLOYEE, JOB, CUSTOMER WHERE EMPLOYEE.JOB_ID=JOB.JOB_ID AND JOB.FUNCTION='SALESPERSON' AND CUSTOMER.SALESPERSON_ID=EMPLOYEE.EMPLOYEE_ID;

13--SELECT FIRST_NAME FROM EMPLOYEE WHERE 
EMPLOYEE_ID=(SELECT SALESPERSON_ID FROM CUSTOMER 
GROUP BY SALESPERSON_ID HAVING COUNT(SALESPRESON_ID) IN (
SELECT MAX(COUNT(ORDER_ID)FROM CUSTOMER) GROUP BY 
SALESPERSON_ID));

14--SELECT CTR.NAME NOMBRE FROM CUSTOMER CTR JOIN SALES_ORDER S_ORDER ON CTR.CUSTOMER_ID=S_ORDER.CUSTOMER_ID GROUP BY CUSTOMER_ID, CTR.NAME ORDER BY COUNT(S_ORDER.ORDER_ID) DESC FETCH FIRST 1 ROWWS;

SELECT C.NAME AS "NOMBRE CLIENTE" FROM CUSTOMER C JOIN SALES_ORDER S ON C.CUSTOMER_ID =S.CUSTOMER_ID WHERE S.ORDER_DATE=(SELECT MIN(ORDER_DATE) FROM SALES_ORDER); 



























































select * from PEDIDOS WHERE FECHA_PEDIDO=(SELECT MAX(FECHA_PEDIDO)FROM PEDIDOS);

SELECT PRODUCTO_NO FROM PRODUCTOS WHERE STOCK_DISPONIBLE >=25 ;

--
--1
SELECT AVG(LIMITE_CREDITO), NOMBRE FROM CLIENTES GROUP BY NOMBRE;
SELECT UNIDADES;

--2
SELECT SUM(STOCK_DISPONIBLE*PRECIO_ACTUAL) FROM PRODUCTOS;
  
--4
SELECT AVG(SALARIO) FROM EMPLEADOS WHERE UPPER(OFICIO) NOT IN ('PRESIDENTE', 'DIRECTORES');  
  
--5
SELECT PRODUCTO_NO, SUM(UNIDADES) FROM PEDIDOS WHERE PRODUCTO_NO=30 AND FECHA_PEDIDO BETWEEN '1/12/1999' AND '31/12/1999' GROUP BY PRODUCTO_NO;
  
--6Cuantas personas por oficio tiene a su cargo cada director de la empresa.
SELECT DIRECTOR, COUNT(EMP_NO) FROM EMPLEADOS WHERE UPPER(OFICIO) NOT IN('DIRECTOR','PRESIDENTE') GROUP BY DIRECTOR;

--7Se va a subir el sueldo a los empleados que llevan mas de 40 años en la empresa 
--un 10% , muestra por pantalla todos los datos de los empleados de mas de 40 años y una
--columna adicional en la que se calcule el nuevo salario.
select emp_no,apellido,oficio,director,fecha_alta,salario,comision,dep_no , salario*1.1 nuevo_salario
from empleados where extract(year from sysdate) - extract(year from fecha_alta)>=40;
  
--8
SELECT APELLIDO FROM EMPLEADOS WHERE OFICIO LIKE='_______A%';

--9
SELECT MAX(COMISION), OFICIO, DEP_NO FROM EMPLEADOS GROUP BY OFICIO, DEP_NO;

--EJERCICIO ACT 2
--b) Obtén los apellidos de los empleados junto con sus fechas de alta,
--estas últimas en formato <<dia>> de <<nombre del mes>> de <<año con 4
--dígitos>>.
SELECT APELLIDO, TO_CHAR(FECHA_ALTA, 'DD-MONTH-YYYY') FROM EMPLEADOS;

SELECT APELLIDO, CONCAT('DAY'(FECHA_ALTA)," del ",'MONTH'(FECHA_ALTA)," de ",'YEAR'(FECHA_ALTA)) as 'Fecha de alta'
FROM EMPLEADOS;


SELECT EMPLEADOS.APELLIDO, EMPLEADOS.FECHA_ALTA, DEPARTAMENTOS.DNOMBRE AS DEPARTAMENTO
FROM EMPLEADOS, departamentos
ORDER BY FECHA_ALTA desc
LIMIT 4;

SELECT * 
FROM PEDIDOS WHERE FECHA_PEDIDO=(SELECT MAX(FECHA_PEDIDO) FROM PEDIDOS);

SELECT STOCK_DISPONIBLE, DESCRIPCION, PRECIO_ACTUAL*1.1 FROM PRODUCTOS WHERE STOCK_DISPONIBLE>= 25;
--E
SELECT * FROM PRODUCTOS WHERE PRECIO_ACTUAL=(SELECT MIN(PRECIO_ACTUAL)FROM PRODUCTOS) ORDER BY PRODUCTO_NO;

SELECT OFICIO, EMP_NO FROM EMPEADOS WHERE OFICO=('VENDEDOR');

SELECT PRODUCTO_NO, SUM(UNIDADES)FROM PEDIDOS GROUP BY PRODUCTO_NO; 

SELECT APELLIDO, AVG(SALARIO) AS "SALARIO DE LOS EMPLEADOS" FROM EMPLEADOS WHERE OFICIO NOT IN ('DIRECTORES','PRESIDENTE') GROUP BY APELLIDO;

SELECT PRODUCTO_NO, COUNT(PRODUCTO_NO) FROM PRODUCTOS WHERE PRODUCTO_NO=30 AND FECHA_PEDIDO BETWEEN '1/12/1999' AND '31/12/1999' GROUP BY PRODUCTO_NO;


SELECT C.NAME AS "NOMBRE CLIENTE MAYOR VALOR" FROM CUSTOMER C JOIN SALES_ORDER S ON C.CUSTOMER_ID=S.CUSTOMER_ID WHERE S.TOTAL=(SELECT MAX(TOTAL) FROM SALES_ORDER);

SELECT(EMPLOYEE.FIRST_NAME) AS "NOMBRE_EMPLEADO", MAX(COUNT(CUSTOMER.CUSTOMER_ID)) FROM EMPLOYEE, JOB, CUSTOMER WHERE EMPLOYEE.JOB_ID=JOB.JOB_ID AND JOB.FUNCTION='SALESPERSON' AND CUSTOMER.SALESPERSON_ID=EMPLOYEE.EMPLOYEE_ID;

SELECT FIRST_NAME FROM EMPLOYEE WHERE EMPLOYEE_ID=(SELECT SALESPERSON_ID FROM CUSTOMER GROUP BY SALESPERSON_ID HAVING COUNT(SALESPRESON_ID) IN (SELECT MAX(COUNT(ORDER_ID )FROM CUSTOMER) GROUP BY SALESPERSON_ID)));





crear view en sql tabla

1-CREATE OR REPLACE VIEW EMPLE_DEP30 AS SELECT * FROM EMPLEADOS WHERE DEP_NO=30;

2-REATE VIEW DATOS_VENDEDORES AS SELECT EMP_NO AS NUM_VENDEDOR, APELLIDO, DIRECTOR, FECHA_ALTA, DEP_NO, FROM EMPLEADOS WHERE OFICIO='VENDEDOR';

3-CREATE VIEW RESUMEN_DEP AS SELECT DEP_NO, COUNT(EMP_NO)AS NUM_EMPLEADOS, SUM(SALARIO) AS SALARIO_TOTAL FROM EMPLEADO GROUP BY DEP_NO 

4-CREATE VIEW RESUMEN_DEP2 AS SELECT D.NOMBRE, COUNT(EMP_NO) "CANTIDAD_EMPLEADOS", SUM(SALARIO)"SALARIO_TOTAL" FROM DEPARTAMENTOS JOIN EMPLEADOS E AND D.DEP_NO=E.DEP_NO GROUP BY D.NOMBRE HAVING COUNT(E.EMP_NO)>2;

5-CREATE OR REPLACE VIEW CLIENTE_PEDIDO AS SELECT C.NOMBRE, P.PEDIDO_NO, PR.DESCRIPCION FROM CLIENTES C LEFT JOIN PEDIDO P ON C.CLIENTE_NO=P.CLIENTE_NO LEFT JOIN PRODUCTOS ON P.PRODUCTO_NO=PR.PRODUCTO_NO;


:::::::::::::::::::::EJERCICICOS DE BOLETIN 2 SQL VISTAS::::::::::::::::::::::::::::::::

CREATE VIEW VIEW_D_SONGS AS SELECT ID, TITLE "Song Title", ARTIST FROM D_SONGS WHERE ARTIST="DJs on Demand";

--4-TABLA DE LOS EVENTOS PROXIMOS MESES Y DE LOS PASADOS
CREATE VIEW EVENTOS_PASADOS AS SELECT EVENT_ID FROM D_EVENTS ;
--TABLA VISTA PARA MOSTRAR EL NOMBRE DEL EVENTO, FECHA Y DESCRIPCION DEL TEMA
--UTILIZAR ALIAS PARA CADA COLUMNA
CREATE VIEW TEMA_EVENTO AS SELECT  NAME "NOMBRE DEL EVENTO", EVENT_DATE "FECHA DEL EVENTO", DESCRIPTION "DESCRIPCION DEL EVENTO" FROM D_EVENTS;

--5-SALARIOS MINIMOS,MAXIOMOS Y MEDIOS, AGRUPADOS POR DEPARTAMENTO
CREATE VIEW SALARIO_DE_EMPLEADOS AS SELECT MAX(SALARY), MIN(SALARY), AVG(SALARY) FROM EMPLOYEE GROUP BY DEP_NO;

--6-CREAR UNA COPIA DE LAS SIGUIETES TABLAS D_SONGS, D_EVENTS, D_CDS Y D_CLIENTS LLAMARLAS POR OTROS NOMBRES

--7-Cree una vista basada en la tabla COPY_D_CDS de DJs on Demand. Asigne a la vista el nombre read_copy_d_cds. 
CREATE VIEW READ_COPY_D_CDS SELECT AS NAME, READ_COPY_D_CDS FROM COPY_D_CDS WHERE YEAR=2000 WHIT READ ONLY;
SELECT D_SONGS, D_EVENTS, D_CDS, D_CLIENTS INTO COPY_D_SONGS, COPY_D_EVENTS, COPY_D_CLIENTS FROM 

--8-.Utilizando la vista read_copy_d_cds, ejecute DELETE FROM read_copy_d_cds WHERE cd_number = 90
DELETE FROM READ_COPY_D_CDS WHERE CD_NUMBER=90;

--9-Utilice REPLACE para modificar read_copy_d_cds. Sustituya la opción READ ONLY por WITH CHECK OPTION CONSTRAINT ck_read_copy_d_cds.













CHANNEL, LINK, DESCRIPCION 

tinierss

temp mail genera un correo electronico temporal

suscribirse a feedly

vitnami donde se pueden encontrar maquinas irtuales.

for order by
etiqueta dentro bucle





UD11 - Optimización de consultas mediante índices
Boletín 1
1. ¿Qué es un índice y para qué se utiliza?
	-Son objetos asociados a clomnas de tablas que sirven para acceder de manera más rapida a los datos.

2. ¿Qué es un ROWID y cómo se utiliza?
	-una representacion de cadena en base 64 que contiene la ubicacion/direccion/identificador del bloque cuyos indices los utilizan porque son la forma mas rapida para acceder a cualquier fila concreta.

3. ¿Cuándo se crea un índice automáticamente?
En el esquema de C##SCOTT realiza los siguientes apartados:
	-Se crea un indice automatico al definir una restriccion de clave primaria o unique en una columna de la tabla.

4. Cree un índice no único (clave ajena) para la columna de DJs on Demand
(cd_number) en la tabla D_TRACK_LISTINGS. Utiliza las tablas del diccionario de
datos para confirmar que se ha creado el índice.
	-CREATE INDEX 

5. Utilice una sentencia de consulta de composición para mostrar los índices y la
unicidad que existen en el diccionario de datos para la tabla D_SONGS.

6. Utilice una sentencia SELECT para mostrar index_name, table_name y la
unicidad del diccionario de datos USER_INDEXES para la tabla D_EVENTS.

7. Cree un índice basado en funciones para la columna last_name de la tabla
D_PARTNERS que haga posible que no sea necesario poner en mayúsculas el
nombre de la tabla para las búsquedas. Escriba una sentencia SELECT que utilice
este índice.



